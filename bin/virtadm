#!/usr/bin/env bash
#
# Basic ideas from:
# * https://github.com/xwmx/bash-boilerplate
# * https://github.com/kvz/bash3boilerplate
# * https://github.com/oxyc/bash-boilerplate

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

trap 'echo "Error: trap called in ${FUNCNAME-main context} line ${LINENO}."' ERR

SCRIPT_DIR="$(dirname "$(readlink -es "${BASH_SOURCE[0]}")")"
SCRIPT_BASE="$(cd "${SCRIPT_DIR}/.." && pwd)"
export SCRIPT_BASE
progname="$(basename "${0}")"

function __die() {
  tput setaf 9
  echo "Error: ${1}" >&2
  tput sgr0
  exit 1
}

# from: https://stackoverflow.com/a/21189044
# maybe switch to https://github.com/mrbaseman/parse_yaml
function __parse_yaml {
   local prefix s w fs
   prefix="${2:-}"
   s='[[:space:]]*' w='[a-zA-Z0-9_]*'
   fs="$(echo @|tr @ '\034')"
   sed -ne "s|^\(${s}\):|\1|" \
        -e "s|^\(${s}\)\(${w}\)${s}:${s}[\"']\(.*\)[\"']${s}\$|\1${fs}\2${fs}\3|p" \
        -e "s|^\(${s}\)\(${w}\)${s}:${s}\(.*\)${s}\$|\1${fs}\2${fs}\3|p"  "${1}" |
   awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"${prefix}"'",vn, $2, $3);
      }
   }'
}

# Normalize Options

# From: https://github.com/e36freak/templates/blob/master/options

# Iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
# while the number of arguments is greater than 0
while ((${#}))
do
  case "${1}" in
    # if option is of type -ab
    -[!-]?*)
      # loop over each character starting with the second
      for ((i=1; i<${#1}; i++))
      do
        # extract 1 character from position 'i'
        c="${1:i:1}"
        # add current char to options
        options+=("-${c}")
      done
      ;;
    # if option is of type --foo=bar, split on first '='
    --?*=*)
      options+=("${1%%=*}" "${1#*=}")
      ;;
    # end of options, stop breaking them up
    --)
      options+=(--endopts)
      shift
      options+=("${@}")
      break
      ;;
    # otherwise, nothing special
    *)
      options+=("${1}")
      ;;
  esac

  shift
done
# set new positional parameters to altered options. Set default to blank.
set -- "${options[@]:-}"
unset options

subcommand="${1}"

case "${subcommand}" in
    "" | "-h" | "--help")
        subcommand="help"
        ;;
    *)
        shift
        ;;
esac

# check if programs are in PATH and user has permissions
if [ "${subcommand}" != "help" ] && [ "${subcommand}" != "check" ]
then
  for __command in virsh qemu-img kvm virt-install cloud-localds curl j2
  do
    if ! command -v ${__command} &> /dev/null
    then
      __die "Command '${__command}' not found. Please run '${progname} check' for validation"
    fi
  done
  if [ ! -w /var/run/libvirt/libvirt-sock ] || [ ! -w /dev/kvm ]
  then
      __die "Current user has no permissions. Please run '${progname} check' for validation"
  fi
fi

# source the subcommand and execute the subcommand
if [ ! -f "${SCRIPT_DIR}/virtadm-${subcommand}.sh" ]
then
  __die "Subcommand '${subcommand}' is not available"
fi
# shellcheck disable=SC1090
. "${SCRIPT_DIR}/virtadm-${subcommand}.sh"
# shellcheck disable=SC2068
"_virtadm_${subcommand}" $@
if [ $? = 127 ]; then
    __die "'${subcommand}' is not a known subcommand."
fi
